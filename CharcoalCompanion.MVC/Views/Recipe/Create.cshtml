@model CharcoalCompanion.Models.Recipes.RecipeCreate

@{
    ViewBag.Title = "Create Recipe";
}

<h2>Create a Recipe</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <p>Put in your favorite recipes, and you can even connect a Plan that you like to it!</p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group form-row">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group form-row">
            @Html.LabelFor(model => model.Directions, htmlAttributes: new { @class = "control-label col-sm-2" })
            <div class="col-sm-10">
                @Html.TextAreaFor(model => model.Directions, new { @class = "form-control form-control-full", rows = "3" })
                @Html.ValidationMessageFor(model => model.Directions, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group form-row">
            @Html.LabelFor(model => model.Ingredients, htmlAttributes: new { @class = "control-label col-sm-2" })
            <div class="col-sm-10">
                @Html.TextAreaFor(model => model.Ingredients, new { @class = "form-control form-control-full", rows = "3" })
                @Html.ValidationMessageFor(model => model.Ingredients, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group form-row">
            @Html.LabelFor(model => model.Steps, htmlAttributes: new { @class = "control-label col-sm-2" })
            <div class="col-sm-10">
                @Html.TextAreaFor(model => model.Steps, new { @class = "form-control form-control-full", rows = "3" })
                @Html.ValidationMessageFor(model => model.Steps, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Plans.Count() > 0)
        {
            <div class="form-group form-row">
                @Html.LabelFor(model => model.PlanId, htmlAttributes: new { @class = "control-label col-sm-2" })
                <div class="col-sm-10">
                    @foreach (var plan in Model.Plans)
                    {
                        <div class="form-check">
                            @Html.RadioButtonFor(model => model.PlanId, plan.PlanId, new { @class = "form-check-input", id = ("Plan" + plan.PlanId) })
                            @Html.Label(plan.PlanId.ToString(), new { @class = "form-check-label", @for = ("Plan" + plan.PlanId) })
                        </div>
                    }
                    @Html.ValidationMessageFor(model => model.PlanId, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group form-row">
            <div class="offset-md-2 col">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
            <div class="col my-auto text-right">
                @Html.ActionLink("Back to List", "Index", "", new { @class = "btn btn-sm btn-secondary ml-auto" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
